#!/bin/sh -e
#
# Instal or update all the dependencies.
#

cd "$(dirname "$0")"

# Environment {{{
# ===============

# Install new dependencies
readonly INSTALL="${INSTALL:-true}"

# Update existing dependencies
readonly UPDATE="${UPDATE:-true}"

# Install all the dependencies
ALL=true

cat=
dep=

# }}}

# Helpers {{{
# ===========

#
# Print arguments and execute them.
#
p() {
    echo "$@" && "$@"
}

#
# Print arguments except first and execute them.
#
pp() {
    first=$1; shift
    echo "$@" && "$first" "$@"
}

#
# Print a header for the current context.
#
header() {
    echo
    echo '#'
    echo "# $cat/$dep"
    echo '#'
    echo
}

#
# Replace dashes by underscores.
#
d2u() {
    echo "$1" | sed 's/-/_/g'
}

#
# Include a category (define a global variable).
#
include() {
    readonly "INCLUDE_$(d2u "$1")=true"
}

#
# Return whether given category is included.
#
included() {
    ! "$ALL" && [ -z "$(eval "echo \$INCLUDE_$(d2u "$1")")" ]
}

#
# Run a builder.
#
# A builder is function declined in `_i` and `_u` variants, respectively
# for "install" and "update".
#
# If the target directory (`$cat/$dep`) doesn't exists, the install
# function is executed, otherwise the update function.
#
# Note the builder functions are executed in the targeted directory.
#
# Also a header is printed.
#
run() {
    prefix=$1; shift

    #
    # If we don't install everything and the current category is not
    # included, don't install the dependency.
    #
    if included "$cat"; then
        return
    fi

    if "$INSTALL" && [ ! -d "$cat/$dep" ]; then
        header
        mkdir -p "$cat/$dep"
        (cd "$cat/$dep" && "${prefix}_i" "$@")
    elif "$UPDATE"; then
        header
        (cd "$cat/$dep" && "${prefix}_u" "$@")
    fi
}

# }}}

# Arguments {{{
# =============

#
# If there is any argument, mark `ALL` as false, and define an
# environment variable for each included category.
#
for cat in "$@"; do
    ALL=false
    include "$cat"
done

readonly ALL

# }}}

# Builders {{{
# ============

git() {
    run git "$@"
}

git_i() {
    pp command git clone --depth 1 "$1" .
}

git_u() {
    pp command git remote set-url origin "$1"
    pp command git pull
}

github() {
    git "https://github.com/${1}.git"
}

# }}}

. ./deps.sh
