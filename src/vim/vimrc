" Initialization {{{
" ==================

    " Don't use system Vim configuration
    set noexrc

    " Leave compatible mode alone
    if &compatible
        finish
    endif

    " NeoBundle {{{
    " -------------

        set rtp+=~/.vim/bundle/neobundle.vim

        try
            call neobundle#begin()
        catch
            " Download NeoBundle and try again
            silent! !mkdir -p ~/.vim/bundle
            silent! !git clone --depth 1 https://github.com/Shougo/neobundle.vim.git ~/.vim/bundle/neobundle.vim
            call neobundle#begin()
        endtry

    " }}}

" }}}

" Plugins {{{
" ===========

    " Essentials {{{
    " --------------

        " NeoBundle core
        NeoBundleFetch 'Shougo/neobundle.vim'

        " Defaults everyone can agree on
        NeoBundle 'tpope/vim-sensible'

        " Fancy status line
        NeoBundle 'bling/vim-airline'

        " Buffers in status line
        NeoBundle 'bling/vim-bufferline'

        " tmux integration
        NeoBundle 'christoomey/vim-tmux-navigator'

    " }}}

    " Tree {{{
    " --------

        " File explorer
        NeoBundle 'scrooloose/nerdtree'

        " Tabs integration
        NeoBundle 'jistr/vim-nerdtree-tabs'

    " }}}

    " Finder, fuzzy, menu {{{
    " -----------------------

        " Dependency for Unite and others (parallel execution)
        NeoBundle 'Shougo/vimproc.vim', {'build': {'unix': 'make'}}

        " Find anything
        NeoBundle 'Shougo/unite.vim'

        " Find tags
        NeoBundle 'tsukkee/unite-tag'

        " Switch color scheme
        NeoBundle 'ujihisa/unite-colorscheme'

        " Fuzzy finder (faster than Unite equivalent)
        NeoBundle 'kien/ctrlp.vim'

        " Fuzzy finder (needs Ruby)
        " NeoBundle 'wincent/Command-T'

    " }}}

    " Autocompletion {{{
    " ------------------

        " Autocompletion (lightweight)
        "NeoBundle 'AutoComplPop'

        " Autocompletion (intermediate)
        NeoBundle 'Shougo/neocomplcache.vim'

        " Autocompletion (same as `neocomplcache`, faster, but needs Lua)
        "NeoBundle 'Shougo/neocomplete.vim'

        " Browse completion with `<Tab>`
        NeoBundle 'ervandew/supertab'

        " Autocompletion (heavy and powerful)
        "NeoBundle 'Valloric/YouCompleteMe'

    " }}}

    " Snippets {{{
    " ------------

        " Snippets engine
        NeoBundle 'SirVer/ultisnips'

        " Actual snippets
        NeoBundle 'honza/vim-snippets'

        " Snippets engine (alternative)
        "NeoBundle 'Shougo/neosnippet'

        " Actual snippets (alternative)
        "NeoBundle 'Shougo/neosnippet-snippets'

    " }}}

    " Theme {{{
    " ---------

        " Color scheme
        NeoBundle 'wombat256.vim'

        NeoBundle 'chriskempson/base16-vim'

    " }}}

    " Misc {{{
    " --------

        " Repeat with `.` for plugins
        NeoBundle 'tpope/vim-repeat'

        " Multiple cursors (kinda) like Sublime Text
        NeoBundle 'terryma/vim-multiple-cursors'

        " A shell inside Vim
        " NeoBundle 'Shougo/vimshell.vim'
    " }}}

    " Motions/objects {{{
    " --------------------

        " Add next/last movments (`dinb` to delete in next parentheses)
        NeoBundle 'https://gist.githubusercontent.com/sjl/3762227/raw/f46750139793115a7c6380b6e03fdac52af38ffe/nextlast.vim',
            \ {'script_type': 'plugin'}

        " Switch arguments
        NeoBundle 'PeterRincker/vim-argumentative'

        " New text objects
        "NeoBundle 'wellle/targets.vim'

        " Quick motions
        NeoBundle 'Lokaltog/vim-easymotion'

        " Exchange operator
        NeoBundle 'tommcdo/vim-exchange'

        " Change surroundings
        NeoBundle 'tpope/vim-surround'

        " Select by indent level
        NeoBundle 'qstrahl/vim-dentures'

        " Alignment helper
        NeoBundle 'Align'

        " Alignment helper
        " NeoBundle 'tommcdo/vim-lion'

        " Camel case and underscore motions
        NeoBundle 'bkad/CamelCaseMotion'

    " }}}

    " Syntax {{{
    " ---------------

        NeoBundle 'tpope/vim-git'
        NeoBundle 'pangloss/vim-javascript'
        " NeoBundle 'othree/yajs.vim' " Alternative JavaScript
        NeoBundle 'godlygeek/tabular' " Needed by `markdown`
        NeoBundle 'plasticboy/vim-markdown'
        NeoBundle 'bohrshaw/vim-vimperator-syntax'
        NeoBundle 'digitaltoad/vim-jade'
        NeoBundle 'wavded/vim-stylus'
        NeoBundle 'evidens/vim-twig'
        NeoBundle 'othree/html5.vim'
        NeoBundle 'elzr/vim-json'
        NeoBundle 'wting/rust.vim'
        NeoBundle 'chrisbra/csv.vim'
        NeoBundle 'PotatoesMaster/i3-vim-syntax'

    " }}}

    " Web API {{{
    " -----------

        " Web API framework (needed by `gist`)
        NeoBundle 'mattn/webapi-vim'

        " Manage GitHub gists
        NeoBundle 'mattn/gist-vim'

    " }}}

    " Auto {{{
    " --------

        " Auto close blocks
        NeoBundle 'tpope/vim-endwise'

        " Auto close structures and quotes (awesome fork to avoid annoying mode)
        NeoBundle 'A2K/auto-pairs'

        " Auto toggle paste mode
        NeoBundle 'ConradIrwin/vim-bracketed-paste'

        " Auto change to project root
        " NeoBundle 'airblade/vim-rooter'

        " Auto detect indent (disabled because not accurate)
        " NeoBundle 'ciaranm/detectindent'

    " }}}

    " Helpers {{{
    " -----------

        " Git wrapper
        NeoBundle 'tpope/vim-fugitive'

        " Show modified lines in Git projects
        " NeoBundle 'airblade/vim-gitgutter'

        " Clipboard helper
        NeoBundle 'svermeulen/vim-easyclip'

        " Comment stuff out
        NeoBundle 'tpope/vim-commentary'

        " Narrow region to focus edit
        NeoBundle 'chrisbra/NrrwRgn'

        " Use ack with Vim
        NeoBundle 'mileszs/ack.vim'

        " HTML shortcuts
        NeoBundle 'mattn/emmet-vim'

        " `%` for HTML, LaTeX and more (native in recent Vim versions)
        " NeoBundle 'matchit.zip'

        " Syntax checker
        NeoBundle 'scrooloose/syntastic'

        " Switch expressions (true/false, on/off, etc.)
        NeoBundle 'AndrewRadev/switch.vim'

    " }}}

    " UI {{{
    " ------

        " Source explorer
        " NeoBundle 'wesleyche/SrcExpl'

        " Browse undo tree
        NeoBundle 'mbbill/undotree'

        " Show marks
        NeoBundle 'kshenoy/vim-signature'

        " Show tags from file
        NeoBundle 'majutsushi/tagbar'

        " Context-aware relative or absolute numbers
        " NeoBundle 'myusuf3/numbers.vim'

        " Mark indent (disabled because slow)
        " NeoBundle 'Yggdroot/indentLine'

    " }}}

    call neobundle#end()

    " Install new plugins
    NeoBundleCheck

" }}}

" Essentials {{{
" ==============

    " Force `sensible` to load before vimrc
    runtime! plugin/sensible.vim

    " Display line numbers
    set number

    " Highlight cursor line
    set cursorline

    " Show 80 chars limit
    set colorcolumn=80

    " UTF-8 support without BOM
    set encoding=utf-8 nobomb

    " No word wrap
    set nowrap

    " Silently change unsaved buffer
    set hidden

    " See `:help fo-table`
    set formatoptions+=croqnlj
    set formatoptions-=t

    " Do not reset cursor with some commands (like `H`, `M`, `L`)
    set nostartofline

    " Do not create `.swp` files
    set noswapfile

    " Read `.vimrc` in the current directory
    set exrc

    " Secure mode for `exrc`
    set secure

    " No preview window during completion
    set completeopt-=preview

    " Keep 8 context lines when scrolling
    set scrolloff=8

    " No bounds when in visual block
    set virtualedit=block

    " Spell check language
    set spelllang=en

    " Set window title
    set title

    " Fold with markers
    set foldmethod=marker

    " Save edit history to file
    set undofile
    set undodir=~/.vim/undo

    " Set leader
    let mapleader=','

" }}}

" Optimization {{{
" ================

    " Fast terminal commections
    set ttyfast

    " Don't redraw when running macros
    set lazyredraw

    " Syntax optimization
    syntax sync minlines=256

    " Don't highlight past 128 characters
    set synmaxcol=128

" }}}

" Theme {{{
" =========

    set background=dark
    let base16colorspace=256
    colorscheme base16-default

" }}}

" Completion {{{
" ==============

    "
    " Complete until longest match. On tab, list matches. If tab is pressed
    " again, do full completion.
    "
    set wildmode=longest,list,full

    " Files to ignore in completion
    set wildignore+=*.o,*.out,*.so,*.class,*.pyc " Compiled binaries
    set wildignore+=*.tar,*.tar.*,*.zip,*.rar " Archives
    set wildignore+=*.jpg,*.jpeg,*.png,*.gif
    set wildignore+=*.gz,*.bz2,*.xz " Compressed files
    set wildignore+=.git,.svn,.hg " Version control

" }}}

" Indentation {{{
" ===============

    " Copy previous line indentation settings
    set copyindent

    " Use spaces instead of tabs
    set expandtab

    " Tab display width
    set tabstop=4

    " Remove 4 spaces with backspace
    set softtabstop=4

    " Indentation command width
    set shiftwidth=4

    " Always indent to a multiple of the configuration value
    set shiftround

    " Show whitespaces
    set listchars=tab:——,trail:•,extends:>,precedes:<,nbsp:•
    set list

    " Indentation helper {{{

        function! Indent(width)
            execute 'set ts='.a:width.' sts='.a:width.' sw='.a:width
        endfunction

        command! -nargs=1 Indent :call Indent(<f-args>)

    " }}}

" }}}

" Filetype associations {{{
" =========================

    " Text width {{{
    " --------------

        au FileType text set tw=72
        au FileType tex set tw=72
        au FileType markdown set tw=72

    " }}}

    " Indentation {{{
    " ---------------

        au FileType apache set et!
        au FileType gitconfig set et!

        au FileType javascript set ts=2 sts=2 sw=2
        au FileType json set ts=2 sts=2 sw=2
        au FileType html set ts=2 sts=2 sw=2 wrap
        au FileType markdown set ts=2 sts=2 sw=2 wrap
        au FileType twig set ts=2 sts=2 sw=2 wrap
        au FileType jade set ts=2 sts=2 sw=2 wrap
        au FileType haml set ts=2 sts=2 sw=2 wrap
        au FileType stylus set ts=2 sts=2 sw=2 wrap

    " }}}

    " Syntax {{{
    " ----------

        au BufRead,BufNewFile *.md set filetype=markdown
        au BufRead,BufNewFile *.ronn set filetype=markdown
        au BufRead,BufNewFile *.swig set filetype=twig

    " }}}

" }}}

" Search {{{
" =========

    " Case insensitive
    set ignorecase

    " Sensitive completion
    set infercase

    " Sensitive search if upper characters
    set smartcase

" }}}

" Wrap {{{
" ========

    " Include the wrap lines for following moves
    noremap j gj
    noremap k gk

    " Do not break words
    set linebreak

" }}}

" Plugin settings {{{
" ===================

    " `airline` {{{
    " -------------

        let airline#extensions#tabline#enabled=1
        " let airline_powerline_fonts=1

    " }}}

    " `nerdtree` {{{
    " --------------

        map <Leader>n :NERDTreeTabsToggle<CR>

    " }}}

    " `detectindent` {{{
    " ------------------

        " au BufRead * DetectIndent

    " }}}

    " `unite` {{{
    " -----------

        map <Leader>f :Unite file file/new directory/new<CR>
        map <Leader>r :Unite file_rec/async<CR>
        map <Leader>b :Unite buffer<CR>
        map <Leader>t :Unite tag<CR>
        map <Leader>g :Unite grep:.<CR>
        map <Leader>c :Unite colorscheme<CR>

        " Fuzzy matching and sort like `ctrlp`
        call unite#filters#matcher_default#use(['matcher_fuzzy'])
        call unite#filters#sorter_default#use(['sorter_length'])

        " Start in insert mode, and use the whole buffer
        call unite#custom#profile('default', 'context', {
            \ 'start_insert': 1,
            \ 'no_split': 1,
            \ })

    " }}}

    " `bufferline` {{{
    " ----------------

        " Do not echo since it's integrated in the status line
        let bufferline_echo=0

        " Append buffer line to status line
        autocmd VimEnter *
            \ let &statusline='%{bufferline#refresh_status()}'
            \ .bufferline#get_status_string()

    " }}}

    " `indentline` {{{
    " ----------------

        let indentLine_color_term=236
        let indentLine_color_gui='#32322f'
        let indentLine_char='│'
        let indentLine_noConcealCursor=''

    " }}}

    " `markdown` {{{
    " --------------

        " Do not fold
        let vim_markdown_folding_disabled=1

    " }}}

    " `undotree` {{{
    " --------------

        map <Leader>u :UndotreeToggle<CR>

    " }}}

    " `easymotion` {{{
    " ----------------

        " Lower match upper
        let EasyMotion_smartcase=1

        let EasyMotion_enter_jump_first=1
        let EasyMotion_space_jump_first=1

        " Improve standard moves
        map <Leader>l <Plug>(easymotion-lineforward)
        map <Leader>j <Plug>(easymotion-j)
        map <Leader>k <Plug>(easymotion-k)
        map <Leader>h <Plug>(easymotion-linebackward)

        " Keep cursor horizontal position
        let EasyMotion_startofline=0

    " }}}

    " `syntastic` {{{
    " ---------------

        let syntastic_javascript_checkers=['eslint', 'jshint', 'jslint']

    " }}}

    " `gist` {{{
    " ----------

        let gist_post_anonymous=1

    " }}}

    " `easyclip` {{{
    " --------------

        let EasyClipUseCutDefaults=0 " Do not remap `m`
        let EasyClipUseSubstituteDefaults=1 " Remap `s`

        " Paste without format in insert mode
        imap <C-v> <plug>EasyClipInsertModePaste

        " Cut mappings
        nmap dx <Plug>MoveMotionPlug
        xmap dx <Plug>MoveMotionXPlug
        nmap dxx <Plug>MoveMotionLinePlug
        nmap dX <Plug>MoveMotionEndOfLinePlug
        nmap dxX <Plug>MoveMotionReplaceLinePlug

    " }}}

    " `neocomplcache` {{{
    " -------------------

        let neocomplcache_enable_at_startup=1
        let neocomplcache_enable_smart_case=1
        let neocomplcache_enable_auto_select=1

    " }}}

    " `supertab` {{{
    " --------------

        let SuperTabDefaultCompletionType='<C-n>'

    " }}}

    " `auto-pairs` {{{
    " ----------------

        " Do not center line when expanding braces
        let g:AutoPairsCenterLine = 0

        " Allow to type `î` char
        let g:AutoPairsShortcutJump = ''

        " Allow to type `â` char
        let g:AutoPairsShortcutBackInsert = ''

    " }}}

    " `tagbar` {{{
    " ------------

        map <Leader>t :TagbarToggle<CR>

    " }}}

    " `switch` {{{

        nmap - :Switch<CR>

    " }}}

" }}}

" Mappings {{{
" ============

    " Use `Q` for formatting
    noremap Q gq

    " Logical `Y` behavior
    noremap Y y$

    " nmap <Left> :vertical resize -5<CR>
    " nmap <Up> :resize -5<CR>
    " nmap <Right> :vertical resize +5<CR>
    " nmap <Down> :resize +5<CR>

    " Open vimrc in split
    map <Leader>v :vsp ~/.vimrc<CR>

    " Shortcuts to browse buffers
    map <C-n> :bn
    map <C-p> :bp

    " Toggle relative numbering
    map <Leader>r :set relativenumber!<CR>

    " Fix `align` plugin messing with `<Leader>r`
    map '' <Plug>RestoreWinPosn

    " Fix `align` plugin messing with `<Leader>w`
    map '' <Plug>AM_w=

" }}}

" Helpers {{{
" ===========

    " `dwall` {{{
    " -----------

        function! Dwall(line1, line2, ...) range
            let buffer=join(getline(a:line1, a:line2), "\n")
            let args=(a:0 > 0) ? a:0 : ''
            echom system('echo '.shellescape(buffer).' | dwall '.args)
        endfunction

        command! -nargs=? -range=% Dwall :call Dwall(<line1>, <line2>, <f-args>)

    " }}}

    " Cursor jump {{{
    " ---------------

        " Jump to last known cursor position
        autocmd BufReadPost *
            \ if line("'\"") > 1 && line("'\"") <= line('$') |
            \   exe 'normal! g`"' |
            \ endif

    " }}}

" }}}
