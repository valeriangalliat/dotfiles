" Vundle
" ======

set nocompatible " Not compatible with Vi
set rtp+=~/.vim/bundle/neobundle.vim

try
    call neobundle#begin()
catch
    " Download Vundle and try again
    silent! !sh -c '
    \ u="https://github.com/Shougo/neobundle.vim.git";
    \ p=~/.vim/bundle/neobundle.vim;
    \ mkdir -p ~/.vim/bundle && git clone "$u" "$p"'

    call neobundle#begin()
endtry

NeoBundle 'Shougo/neobundle.vim' " Core

" Essentials
" ----------

NeoBundle 'bling/vim-airline' " Fancy status line
NeoBundle 'bling/vim-bufferline' " Buffers in status line
NeoBundle 'Shougo/vimproc.vim', {'build': {'unix': 'make'}}
"NeoBundle 'Shougo/unite.vim' " Awesome finder
"NeoBundle 'tsukkee/unite-tag' " Find tags
NeoBundle 'scrooloose/nerdtree' " File explorer
NeoBundle 'kien/ctrlp.vim' " Fuzzy finder
NeoBundle 'Yggdroot/indentLine' " Mark indent
NeoBundle 'ciaranm/detectindent' " Detect indent

" Autocompletion
" --------------

"NeoBundle 'AutoComplPop' " Autocompletion (lightweight)
"NeoBundle 'Shougo/neocomplete.vim' " Autocompletion
NeoBundle 'Shougo/neocomplcache.vim' " Autocompletion
NeoBundle 'ervandew/supertab' " Browse completion with Tab
"NeoBundle 'Valloric/YouCompleteMe' " Autocompletion (heavy)

" Theme
" -----

NeoBundle 'wombat256.vim' " Color scheme

" Moves/objects
" -------------

NeoBundle 'PeterRincker/vim-argumentative' " Switch arguments
"NeoBundle 'wellle/targets.vim' " New text objects
NeoBundle 'Lokaltog/vim-easymotion' " Quick motions
NeoBundle 'tommcdo/vim-exchange' " Exchange operator
NeoBundle 'tpope/vim-surround' " Change surroundings
NeoBundle 'qstrahl/vim-dentures' " Select by indent level
NeoBundle 'Align' " Statements alignment helper

" Snippets
" --------

NeoBundle 'SirVer/ultisnips' " Snippets engine
NeoBundle 'honza/vim-snippets' " Actual snippets
"NeoBundle 'Shougo/neosnippet'
"NeoBundle 'Shougo/neosnippet-snippets'

" Integration
" -----------

NeoBundle 'tpope/vim-fugitive' " Git wrapper
"NeoBundle 'airblade/vim-gitgutter' " Show modified lines
NeoBundle 'pangloss/vim-javascript' " Improved JavaScript
NeoBundle 'godlygeek/tabular' " Text alignment helper (used by `markdown`)
NeoBundle 'plasticboy/vim-markdown' " Improved Markdown
NeoBundle 'bohrshaw/vim-vimperator-syntax'
NeoBundle 'digitaltoad/vim-jade'
NeoBundle 'wavded/vim-stylus'
NeoBundle 'evidens/vim-twig'

" Web API
" -------

NeoBundle 'mattn/webapi-vim' " Web API framework
NeoBundle 'mattn/gist-vim' " Gist integration

" Helpers
" -------

NeoBundle 'tpope/vim-repeat' " Repeat with `.` for plugins
NeoBundle 'tpope/vim-endwise' " Auto close blocks
"NeoBundle 'airblade/vim-rooter' " Change to project root
NeoBundle 'svermeulen/vim-easyclip' " Clipboard helper
NeoBundle 'ConradIrwin/vim-bracketed-paste' " Auto toggle paste mode
NeoBundle 'tpope/vim-commentary' " Comment stuff out
NeoBundle 'A2K/auto-pairs' " Auto close structures and quotes (awesome fork to avoid annoying mode)
NeoBundle 'chrisbra/NrrwRgn' " Narrow region to focus edit
NeoBundle 'scrooloose/nerdcommenter' " Comment helper

" Code analysis
" -------------

NeoBundle 'scrooloose/syntastic' " Syntax checker

" UI
" --

NeoBundle 'wesleyche/SrcExpl' " Source explorer
NeoBundle 'mbbill/undotree' " Undo column
NeoBundle 'kshenoy/vim-signature' " Marks column
NeoBundle 'majutsushi/tagbar' " Tags column

call neobundle#end()

" Filetype
" ========

filetype plugin on " Filetype specific config (required for Vundle)
filetype indent on " Load indentation rules regarding of filetype

"
" Check bundles to install and prompt.
"
" This must be executed after the Filetype part.
"
NeoBundleCheck

" Theme
" =====

set t_Co=256
colorscheme wombat256mod
syntax on " Syntax highlighting

" Color columns like cursor line
highlight ColorColumn term=underline ctermbg=236 guibg=#32322f

" Global
" ======

set backspace=indent,eol,start " More powerful backspace
set ruler " Show cursor position
set number " Display numbers
set cursorline " Highlight cursor line
set colorcolumn=80 " Show 80 chars limit
set wildmenu " Enhanced command mode (display matches on tab)
set encoding=utf-8 " UTF-8 support
set nowrap " No word wrap
set showcmd " Show commands being typed
set laststatus=2 " Always show status line
set hidden " Silently change unsaved buffer
set formatoptions+=croqnlj " See `:help fo-table`
set formatoptions-=t " No auto text wrap
set nostartofline " Do not reset cursor with some commands
set noswapfile " Do not create `.swp` files
set exrc " Read `.vimrc` in the current directory
set secure " Secure mode for `execrc`
set completeopt-=preview " Remove preview window during completion

" Change leader key
let mapleader=','

"
" Complete until longest match. On tab, list matches. If tab is pressed
" again, do full completion.
"
set wildmode=longest,list,full

" Files to ignore in completion
set wildignore=.git,*.o,*.so,*.pyc

" Indentation
" ===========

set autoindent " Automatic indentation (keep previous line offset)
set copyindent " Copy previous line indentation
set tabstop=4 " Tab width
set expandtab " Use spaces instead of tabs
set softtabstop=4 " Remove 4 spaces with backspace
set shiftwidth=4 " Indentation command width
set shiftround " Indentation is always a multiple of configured width

" Custom filetypes
" ================

" Auto return to line after 72 chars for text files
au FileType text set textwidth=72
au FileType tex set textwidth=72
au FileType markdown set textwidth=72

" Filetype indentation
" ====================

au FileType apache set et!
au FileType gitconfig set et!

au FileType javascript set ts=2 sts=2 sw=2
au FileType html set ts=2 sts=2 sw=2
au FileType markdown set ts=2 sts=2 sw=2 wrap
au FileType twig set ts=2 sts=2 sw=2 wrap
au FileType jade set ts=2 sts=2 sw=2 wrap
au FileType haml set ts=2 sts=2 sw=2 wrap
au FileType stylus set ts=2 sts=2 sw=2 wrap

" Syntax associations
" ===================

au BufRead,BufNewFile *.md set filetype=markdown
au BufRead,BufNewFile *.ronn set filetype=markdown
au BufRead,BufNewFile vimperatorrc set filetype=vimperator

" Search
" ======

set ignorecase " Case insensitive
set infercase " Sensitive completion
set smartcase " Sensitive search if upper characters
set incsearch " Highlight pattern while typed

" Whitespaces
" ===========

set listchars=tab:——,trail:•,nbsp:•
set list " Show whitespaces

" Misc
" ====

set virtualedit=block " No bounds when in visual block
set spelllang=en " Spell check language

" Wrap
" ====

" Include the wrap lines for following moves
noremap j gj
noremap k gk

set linebreak " Do not break words

" Plugins
" =======

" `airline`
" ---------

let airline#extensions#tabline#enabled=1
"let airline_powerline_fonts=1

" `nerdtree`
" ----------

noremap <Leader>n :NERDTreeToggle<CR>

" `unite`
" -------

"noremap <Leader>f :Unite file file/new directory/new<CR>
"noremap <Leader>r :Unite file_rec/async<CR>
"noremap <Leader>b :Unite buffer<CR>
"noremap <Leader>t :Unite tag<CR>
"noremap <Leader>g :Unite grep:.<CR>

" Fuzzy matching and sort like `ctrlp`
"call unite#filters#matcher_default#use(['matcher_fuzzy'])
"call unite#filters#sorter_default#use(['sorter_length'])

" Start in insert mode, and use the whole buffer
"call unite#custom#profile('default', 'context', {
"    \ 'start_insert': 1,
"    \ 'no_split': 1,
"    \ })

" `bufferline`
" ------------

" Do not echo since it's integrated in the status line
let bufferline_echo=0

" Append buffer line to status line
autocmd VimEnter *
    \ let &statusline='%{bufferline#refresh_status()}'
    \ .bufferline#get_status_string()

" `indentline`
" ------------

let indentLine_color_term=236
let indentLine_color_gui='#32322f'
let indentLine_char='│'

" `markdown`
" ----------

" Do not fold
let vim_markdown_folding_disabled=1

" `undotree`
" ----------

noremap <Leader>u :UndotreeToggle<CR>

" `easymotion`
" ------------

let EasyMotion_smartcase=1 " Lower match upper
let EasyMotion_enter_jump_first=1
let EasyMotion_space_jump_first=1

" Improve standard moves
map <Leader>l <Plug>(easymotion-lineforward)
map <Leader>j <Plug>(easymotion-j)
map <Leader>k <Plug>(easymotion-k)
map <Leader>h <Plug>(easymotion-linebackward)

let EasyMotion_startofline=0 " Keep cursor horizontal position

" Replace search
map / <Plug>(easymotion-sn)
omap / <Plug>(easymotion-tn)
map n <Plug>(easymotion-next)
map N <Plug>(easymotion-prev)

" `syntastic`
" -----------

let syntastic_javascript_checkers=['eslint', 'jshint', 'jslint']

" `gist`
" ------

let gist_post_anonymous=1

" `easyclip`
" ----------

let EasyClipUseCutDefaults=0 " Do not remap `m`
let EasyClipUseSubstituteDefaults=1 " Remap `s`

" Paste without format in insert mode
imap <C-v> <plug>EasyClipInsertModePaste

" Cut mappings
nmap dx <Plug>MoveMotionPlug
xmap dx <Plug>MoveMotionXPlug
nmap dxx <Plug>MoveMotionLinePlug
nmap dX <Plug>MoveMotionEndOfLinePlug
nmap dxX <Plug>MoveMotionReplaceLinePlug

" `neocomplcache`
" ---------------

let neocomplcache_enable_at_startup=1
let neocomplcache_enable_smart_case=1
let neocomplcache_enable_auto_select=1

" `supertab`
" ----------

let SuperTabDefaultCompletionType='<C-n>'

" `auto-pairs`
" ------------

let g:AutoPairsMapBS = 0
let g:AutoPairsMapCR = 0
let g:AutoPairsMapSpace = 0
let g:AutoPairsCenterLine = 0 " Do not center line when expanding braces
let g:AutoPairsShortcutJump = '' " Allow to type `i` char
let g:AutoPairsShortcutBackInsert = '' " Allow to type `â` char

" `tagbar`
" --------

noremap <Leader>t :TagbarToggle<CR>

" Misc
" ====

" `dwall`
" -------

function! Dwall(line1, line2, ...) range
    let buffer=join(getline(a:line1, a:line2), "\n")
    let args=(a:0 > 0) ? a:0 : ''
    echom system('echo '.shellescape(buffer).' | dwall '.args)
endfunction

command! -nargs=? -range=% Dwall :call Dwall(<line1>, <line2>, <f-args>)
