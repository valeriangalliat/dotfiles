"
" ~/.vimrc
"

" Initialization {{{
" ==================

    " Leave compatible mode alone
    if &compatible
        finish
    endif

    "
    " Make Vim and foot collaborate.
    "
    " See <https://codeberg.org/dnkl/foot/wiki#ctrl-key-breaks-input-in-vim>
    " and <https://github.com/vim/vim/issues/9014>.
    "
    let &t_TI = "\<Esc>[>4;2m"
    let &t_TE = "\<Esc>[>4m"

" }}}

" Plugins {{{
" ===========

    set runtimepath^=$DOTFILES/vim/plugins/vim-sensible
    set runtimepath^=$DOTFILES/vim/plugins/base16-vim
    set runtimepath^=$DOTFILES/vim/plugins/vim-airline
    set runtimepath^=$DOTFILES/vim/plugins/vim-airline-themes
    " set runtimepath^=$DOTFILES/vim/plugins/AutoComplPop
    " set runtimepath^=$DOTFILES/vim/plugins/neocomplcache.vim
    " set runtimepath^=$DOTFILES/vim/plugins/coc.nvim
    set runtimepath^=$DOTFILES/vim/plugins/vim-mucomplete
    set runtimepath^=$DOTFILES/vim/plugins/vim-repeat
    set runtimepath^=$DOTFILES/vim/plugins/targets.vim
    set runtimepath^=$DOTFILES/vim/plugins/vim-exchange
    set runtimepath^=$DOTFILES/vim/plugins/vim-surround
    set runtimepath^=$DOTFILES/vim/plugins/CamelCaseMotion
    set runtimepath^=$DOTFILES/vim/plugins/vim-endwise
    set runtimepath^=$DOTFILES/vim/plugins/vim-closer
    set runtimepath^=$DOTFILES/vim/plugins/vim-sleuth
    set runtimepath^=$DOTFILES/vim/plugins/vim-bbye
    set runtimepath^=$DOTFILES/vim/plugins/vim-filebeagle
    set runtimepath^=$DOTFILES/vim/plugins/vim-cutlass
    set runtimepath^=$DOTFILES/vim/plugins/vim-commentary
    set runtimepath^=$DOTFILES/vim/plugins/fzf
    set runtimepath^=$DOTFILES/vim/plugins/fzf.vim
    set runtimepath^=$DOTFILES/vim/plugins/vim-javascript
    set runtimepath^=$DOTFILES/vim/plugins/typescript-vim
    set runtimepath^=$DOTFILES/vim/plugins/tabular
    set runtimepath^=$DOTFILES/vim/plugins/vim-markdown
    " set runtimepath^=$DOTFILES/vim/plugins/vim-jade
    " set runtimepath^=$DOTFILES/vim/plugins/vim-stylus
    set runtimepath^=$DOTFILES/vim/plugins/html5.vim
    set runtimepath^=$DOTFILES/vim/plugins/vim-json
    " set runtimepath^=$DOTFILES/vim/plugins/rust.vim
    " set runtimepath^=$DOTFILES/vim/plugins/vim-pug
    " set runtimepath^=$DOTFILES/vim/plugins/i3config.vim
    " set runtimepath^=$DOTFILES/vim/plugins/vim-nix
    set runtimepath^=$DOTFILES/vim/plugins/vim-python-pep8-indent
    set runtimepath^=$DOTFILES/vim/plugins/vim-elixir
    set runtimepath^=$DOTFILES/vim/plugins/vim-toml
    set runtimepath^=$DOTFILES/vim/plugins/dbext.vim

" }}}

" Essentials {{{
" ==============

    " Force `sensible` to load before vimrc
    runtime! plugin/sensible.vim

    " Display line numbers
    set number

    " Highlight cursor line
    set cursorline

    " Show 80 chars limit
    set colorcolumn=80

    " UTF-8 support without BOM
    set encoding=utf-8 nobomb

    " No word wrap
    set nowrap

    " When wrapping, do not break words
    set linebreak

    " When joining lines or formatting text, don't add two spaces between sentences
    set nojoinspaces

    " Silently change unsaved buffer
    set hidden

    " See `:help fo-table`
    set formatoptions+=croqnlj
    " set formatoptions-=t

    " Do not reset cursor with some commands (like `H`, `M`, `L`)
    set nostartofline

    " Swap directory
    set directory=~/.vim/swap

    " Save edit history to file
    set undofile
    set undodir=~/.vim/undo

    " Secure mode for `exrc`
    set secure

    " No preview window during completion
    set completeopt-=preview

    " Keep 8 context lines when scrolling
    set scrolloff=8

    " No bounds when in visual block
    set virtualedit=block

    " Spell check language
    set spelllang=en

    " Set window title
    set title

    " Fold with markers
    set foldmethod=marker

    " More natural split direction
    set splitbelow
    set splitright

    " Do not change window title
    set notitle

    " Case insensitive search
    set ignorecase

    " Sensitive completion
    set infercase

    " Sensitive search if upper characters
    set smartcase

    " Restore the default value for macOS
    set modelines=5

    " Set leader
    let mapleader = ','

    " Auto close netrw after opening file
    let netrw_fastbrowse = 0

" }}}

" Optimization {{{
" ================

    " Fast terminal connections
    set ttyfast

    " Don't redraw when running macros
    set lazyredraw

    " Syntax optimization
    " syntax sync minlines=256

    " Don't highlight past 512 characters
    " set synmaxcol=512

" }}}

" Theme {{{
" =========

    let base16colorspace = 256

    " No background color (see through Vim)
    autocmd ColorScheme * highlight Normal ctermbg=NONE

    "
    " Bad spell force foreground to white (otherwise can end up being red on
    " red and you can't see shit).
    "
    autocmd ColorScheme base16-default-dark highlight SpellBad ctermfg=white
    autocmd ColorScheme base16-default-dark highlight SpellCap ctermfg=white
    autocmd ColorScheme base16-default-dark highlight SpellRare ctermfg=white
    autocmd ColorScheme base16-default-dark highlight SpellLocal ctermfg=white

    " let $BASE16_MODE = $BASE16_MODE ?? 'dark'
    let $BASE16_MODE = $BASE16_MODE ? $BASE16_MODE : 'dark'
    execute 'set background='.$BASE16_MODE

    " let $BASE16_THEME = $BASE16_THEME ?? 'base16-default-dark'
    let $BASE16_THEME = $BASE16_THEME ? $BASE16_THEME : 'base16-default-dark'
    execute 'colorscheme '.$BASE16_THEME

" }}}

" Completion {{{
" ==============

    "
    " Complete until longest match. On tab, list matches. If tab is pressed
    " again, do full completion.
    "
    set wildmode=longest,list,full

    " Files to ignore in completion
    set wildignore+=*.o,*.out,*.so,*.class,*.pyc " Compiled binaries
    set wildignore+=*.tar,*.tar.*,*.zip,*.rar " Archives
    set wildignore+=*.jpg,*.jpeg,*.png,*.gif " Images
    set wildignore+=*.gz,*.bz2,*.xz " Compressed files
    set wildignore+=.git,.svn,.hg " Version control

" }}}

" Indentation {{{
" ===============

    " Copy previous line indentation settings
    set copyindent

    " Use spaces instead of tabs
    set expandtab

    " Tab display width
    set tabstop=4

    " Remove 4 spaces with backspace
    set softtabstop=4

    " Indentation command width
    set shiftwidth=4

    " Always indent to a multiple of the configuration value
    set shiftround

    " Show whitespaces
    set listchars=tab:——,trail:•,extends:>,precedes:<,nbsp:•
    set list

" }}}

" Filetype associations {{{
" =========================

    " Text width
    au FileType text set tw=72
    au FileType tex set tw=72
    au FileType markdown set tw=72

    " Spell
    au FileType text setl spell
    au FileType tex setl spell
    au FileType markdown setl spell

    " Indentation
    au FileType apache setl noet
    au FileType gitconfig setl noet
    au FileType javascript setl ts=2 sts=2 sw=2
    au FileType typescript setl ts=2 sts=2 sw=2
    au FileType typescriptreact setl ts=2 sts=2 sw=2
    au FileType tex setl ts=2 sts=2 sw=2
    au FileType coffee setl ts=2 sts=2 sw=2
    au FileType ruby setl ts=2 sts=2 sw=2
    au FileType json setl ts=2 sts=2 sw=2
    au FileType html setl ts=2 sts=2 sw=2 wrap
    au FileType markdown setl ts=2 sts=2 sw=2 wrap
    au FileType pug setl ts=2 sts=2 sw=2 wrap
    au FileType stylus setl ts=2 sts=2 sw=2
    au FileType tf setl ts=2 sts=2 sw=2
    au FileType go setl noet

" }}}

" Plugin settings {{{
" ===================

    " `airline`
    let airline#extensions#tabline#enabled = 1
    let airline_symbols_ascii = 1

    " `neocomplcache.vim`
    " let neocomplcache_enable_at_startup = 1
    " let neocomplcache_enable_smart_case = 1
    " let neocomplcache_enable_auto_select = 1

    " `vim-mucomplete`
    let mucomplete#enable_auto_at_startup = 1
    set completeopt+=menuone
    set completeopt+=noselect
    " set completeopt+=noinsert
    set shortmess+=c

    " `CamelCaseMotion`
    let camelcasemotion_key = '<Leader>'

    " `vim-javascript`
    let javascript_plugin_jsdoc = 1

    " `vim-markdown` {{{
    " ------------------

        " Do not fold
        let vim_markdown_folding_disabled = 1

        " Do not conceal
        let vim_markdown_conceal = 0
        let vim_markdown_conceal_code_blocks = 0

        " Support front matter
        let vim_markdown_frontmatter = 1

        " Support strikethrough
        let vim_markdown_strikethrough = 1

        " Set list indent
        let vim_markdown_new_list_item_indent = 2

        " Do not recurse syntax (crashes plugin)
        let vim_markdown_fenced_languages = ['markdown=text', 'md=text']

    " }}}

" }}}

" Mappings {{{
" ============

    " Logical `Y` behavior
    noremap Y y$

    " Include the wrap lines when moving
    noremap j gj
    noremap k gk

    " Explicite delete with yanking (complement to `vim-cutlass`)
    nnoremap dx d
    xnoremap dx d
    nnoremap dxx dd
    nnoremap dX D

    map <silent> <Leader>p :set paste!<CR>

    " Shortcuts to browse buffers
    map <silent> <C-j> :bn<CR>
    map <silent> <C-k> :bp<CR>

    " fzf shortcut
    map <silent> <Leader><Leader> :Files<CR>
    map <silent> <Leader>g :GFiles<CR>
    map <silent> <Leader>a :Rg<CR>

" }}}

" Helpers {{{
" ===========

    " Jump to last known cursor position
    autocmd BufReadPost *
        \ if line("'\"") > 1 && line("'\"") <= line('$') |
        \   exe 'normal! g`"' |
        \ endif

    " Toggle relative numbering
    map <silent> <Leader>r :set relativenumber!<CR>

    " Count words (not "dumb" like `wc -w`)
    function! WordCount()
        write !grep -Eo '\w+' | wc -l
    endfunction

    command! WordCount call WordCount()

    " Easily set space indentation
    function! Indent(width)
        execute 'setl ts='.a:width.' sts='.a:width.' sw='.a:width.' et'
    endfunction

    command! -nargs=1 Indent call Indent(<f-args>)

    " Easily reset to tabs
    function! Tabs()
        call Indent(4)
        setl noet
    endfunction

    command! Tabs call Tabs()

" }}}
