"
" ~/.vimrc
"

" Initialization {{{
" ==================

    " Don't use system Vim configuration
    set noexrc

    " Leave compatible mode alone
    if &compatible
        finish
    endif

" }}}

" Plugins {{{
" ===========

    set runtimepath^=$DOTFILES/vim/plugins/vim-sensible
    set runtimepath^=$DOTFILES/vim/plugins/vim-airline
    set runtimepath^=$DOTFILES/vim/plugins/vim-airline-themes
    set runtimepath^=$DOTFILES/vim/plugins/vim-bbye
    set runtimepath^=$DOTFILES/vim/plugins/vim-filebeagle
    set runtimepath^=$DOTFILES/vim/plugins/neocomplcache.vim
    set runtimepath^=$DOTFILES/vim/plugins/base16-vim
    set runtimepath^=$DOTFILES/vim/plugins/vim-repeat
    set runtimepath^=$DOTFILES/vim/plugins/targets.vim
    set runtimepath^=$DOTFILES/vim/plugins/vim-exchange
    set runtimepath^=$DOTFILES/vim/plugins/vim-surround
    set runtimepath^=$DOTFILES/vim/plugins/CamelCaseMotion
    set runtimepath^=$DOTFILES/vim/plugins/vim-javascript
    set runtimepath^=$DOTFILES/vim/plugins/typescript-vim
    set runtimepath^=$DOTFILES/vim/plugins/tabular
    set runtimepath^=$DOTFILES/vim/plugins/vim-markdown
    set runtimepath^=$DOTFILES/vim/plugins/html5.vim
    set runtimepath^=$DOTFILES/vim/plugins/vim-json
    set runtimepath^=$DOTFILES/vim/plugins/rust.vim
    set runtimepath^=$DOTFILES/vim/plugins/vim-pug
    set runtimepath^=$DOTFILES/vim/plugins/vim-nix
    set runtimepath^=$DOTFILES/vim/plugins/vim-python-pep8-indent
    set runtimepath^=$DOTFILES/vim/plugins/vim-endwise
    set runtimepath^=$DOTFILES/vim/plugins/vim-closer
    set runtimepath^=$DOTFILES/vim/plugins/vim-easyclip
    set runtimepath^=$DOTFILES/vim/plugins/vim-commentary

    " Custom additions
    set runtimepath^=$DOTFILES/src/vim

" }}}

" Essentials {{{
" ==============

    " Force `sensible` to load before vimrc
    runtime! plugin/sensible.vim

    " Display line numbers
    set number

    " Highlight cursor line
    set cursorline

    " Show 80 chars limit
    set colorcolumn=80

    " UTF-8 support without BOM
    set encoding=utf-8 nobomb

    " No word wrap
    set nowrap

    " Silently change unsaved buffer
    set hidden

    " See `:help fo-table`
    set formatoptions+=croqnlj
    " set formatoptions-=t

    " Do not reset cursor with some commands (like `H`, `M`, `L`)
    set nostartofline

    " Swap directory
    set directory=~/.vim/swap

    " Save edit history to file
    set undofile
    set undodir=~/.vim/undo

    " Read `.vimrc` in the current directory
    set exrc

    " Secure mode for `exrc`
    set secure

    " No preview window during completion
    set completeopt-=preview

    " Keep 8 context lines when scrolling
    set scrolloff=8

    " No bounds when in visual block
    set virtualedit=block

    " Spell check language
    set spelllang=en

    " Set window title
    set title

    " Fold with markers
    set foldmethod=marker

    " More natural split direction
    set splitbelow
    set splitright

    " Do not change window title
    set notitle

    " Set leader
    let mapleader = ','

    " Auto close netrw after opening file
    let g:netrw_fastbrowse = 0

" }}}

" Optimization {{{
" ================

    " Fast terminal commections
    set ttyfast

    " Don't redraw when running macros
    set lazyredraw

    " Syntax optimization
    " syntax sync minlines=256

    " Don't highlight past 512 characters
    " set synmaxcol=512

" }}}

" Theme {{{
" =========

    set background=dark
    let base16colorspace = 256
    colorscheme base16-default-dark

    " No background color (see through Vim)
    highlight Normal ctermbg=none

    " Bad spell force foreground to white (otherwise can end up being red on
    " red and you can't see shit)
    highlight SpellBad ctermfg=white
    highlight SpellCap ctermfg=white
    highlight SpellRare ctermfg=white
    highlight SpellLocal ctermfg=white

" }}}

" Completion {{{
" ==============

    "
    " Complete until longest match. On tab, list matches. If tab is pressed
    " again, do full completion.
    "
    set wildmode=longest,list,full

    " Files to ignore in completion
    set wildignore+=*.o,*.out,*.so,*.class,*.pyc " Compiled binaries
    set wildignore+=*.tar,*.tar.*,*.zip,*.rar " Archives
    set wildignore+=*.jpg,*.jpeg,*.png,*.gif " Images
    set wildignore+=*.gz,*.bz2,*.xz " Compressed files
    set wildignore+=.git,.svn,.hg " Version control

" }}}

" Indentation {{{
" ===============

    " Copy previous line indentation settings
    set copyindent

    " Use spaces instead of tabs
    set expandtab

    " Tab display width
    set tabstop=4

    " Remove 4 spaces with backspace
    set softtabstop=4

    " Indentation command width
    set shiftwidth=4

    " Always indent to a multiple of the configuration value
    set shiftround

    " Show whitespaces
    set listchars=tab:——,trail:•,extends:>,precedes:<,nbsp:•
    set list

    " Indentation helper {{{
    " ----------------------

        function! Indent(width)
            execute 'setl ts='.a:width.' sts='.a:width.' sw='.a:width.' et'
        endfunction

        command! -nargs=1 Indent call Indent(<f-args>)

        function! Tabs()
            call Indent(4)
            setl noet
        endfunction

        command! Tabs call Tabs()

    " }}}

" }}}

" Filetype associations {{{
" =========================

    " Text width {{{
    " --------------

        au FileType text set tw=72
        au FileType tex set tw=72
        au FileType markdown set tw=72

    " }}}

    " Spell {{{
    " ---------

        au FileType text setl spell
        au FileType tex setl spell
        au FileType markdown setl spell

    " }}}

    " Indentation {{{
    " ---------------

        au FileType apache setl noet
        au FileType gitconfig setl noet
        au FileType javascript setl ts=2 sts=2 sw=2
        au FileType typescript setl ts=2 sts=2 sw=2
        au FileType typescriptreact setl ts=2 sts=2 sw=2
        au FileType tex setl ts=2 sts=2 sw=2
        au FileType coffee setl ts=2 sts=2 sw=2
        au FileType ruby setl ts=2 sts=2 sw=2
        au FileType json setl ts=2 sts=2 sw=2
        au FileType html setl ts=2 sts=2 sw=2 wrap
        au FileType markdown setl ts=2 sts=2 sw=2 wrap
        au FileType pug setl ts=2 sts=2 sw=2 wrap
        au FileType stylus setl ts=2 sts=2 sw=2
        au FileType tf setl ts=2 sts=2 sw=2
        au FileType go setl noet

    " }}}

" }}}

" Search {{{
" ==========

    " Case insensitive
    set ignorecase

    " Sensitive completion
    set infercase

    " Sensitive search if upper characters
    set smartcase

" }}}

" Wrap {{{
" ========

    " Include the wrap lines for following moves
    noremap j gj
    noremap k gk

    " Do not break words
    set linebreak

" }}}

" Plugin settings {{{
" ===================

    " `airline` {{{
    " -------------

        let airline#extensions#tabline#enabled = 1
        let airline_symbols_ascii = 1
        " let airline_powerline_fonts = 1

    " }}}

    " `detectindent` {{{
    " ------------------

        " au BufRead * DetectIndent

    " }}}

    " `fzf` {{{
    " ---------

        map <silent> <Leader>f :FZF<CR>

    " }}}

    " `indentLine` {{{
    " ----------------

        let indentLine_color_term = 236
        let indentLine_color_gui = '#32322f'
        let indentLine_char = '│'
        let indentLine_noConcealCursor = ''

    " }}}

    " `vim-markdown` {{{
    " ------------------

        " Do not fold
        let vim_markdown_folding_disabled = 1

        " Do not conceal
        let vim_markdown_conceal = 0

        " Support front matter
        let vim_markdown_frontmatter = 1

        " Do not recurse syntax (crashes plugin)
        let vim_markdown_fenced_languages = ['markdown=text', 'md=text']

    " }}}

    " `undotree` {{{
    " --------------

        map <silent> <Leader>u :UndotreeToggle<CR>

    " }}}

    " `vim-easymotion` {{{
    " --------------------

        " Lower match upper
        let EasyMotion_smartcase = 1

        let EasyMotion_enter_jump_first = 1
        let EasyMotion_space_jump_first = 1

        " Improve standard moves
        map <Leader>l <Plug>(easymotion-lineforward)
        map <Leader>j <Plug>(easymotion-j)
        map <Leader>k <Plug>(easymotion-k)
        map <Leader>h <Plug>(easymotion-linebackward)

        " Keep cursor horizontal position
        let EasyMotion_startofline = 0

    " }}}

    " `syntastic` {{{
    " ---------------

        let syntastic_mode_map = {'mode': 'passive'}
        let syntastic_javascript_checkers = ['eslint']

    " }}}

    " `gist-vim` {{{
    " --------------

        let gist_post_anonymous = 1

    " }}}

    " `vim-easyclip` {{{
    " ------------------

        let EasyClipUseCutDefaults = 0 " Do not remap `m`
        let EasyClipUseSubstituteDefaults = 1 " Remap `s`

        " Paste without format in insert mode
        imap <C-v> <plug>EasyClipInsertModePaste

        " Cut mappings
        nmap dx <Plug>MoveMotionPlug
        xmap dx <Plug>MoveMotionXPlug
        nmap dxx <Plug>MoveMotionLinePlug
        nmap dX <Plug>MoveMotionEndOfLinePlug
        nmap dxX <Plug>MoveMotionReplaceLinePlug

    " }}}

    " `neocomplcache.vim` {{{
    " -----------------------

        let neocomplcache_enable_at_startup = 1
        let neocomplcache_enable_smart_case = 1
        let neocomplcache_enable_auto_select = 1

    " }}}

    " `neosnippet.vim` {{{
    " --------------------

        " SnipMate compatibility
        let g:neosnippet#enable_snipmate_compatibility = 1
        let g:neosnippet#snippets_directory = '~/.vim/plugins/vim-snippets/snippets'

    " }}}

    " `supertab` {{{
    " --------------

        let SuperTabDefaultCompletionType = '<C-n>'

    " }}}

    " `auto-pairs` {{{
    " ----------------

        " Do not center line when expanding braces
        let g:AutoPairsCenterLine = 0

        " Allow to type `î` char
        let g:AutoPairsShortcutJump = ''

        " Allow to type `â` char
        let g:AutoPairsShortcutBackInsert = ''

        " Disable annoying mode
        let g:AutoPairsMultilineClose = 0

    " }}}

    " `tagbar` {{{
    " ------------

        map <Leader>t :TagbarToggle<CR>

    " }}}

    " `switch.vim` {{{
    " ----------------

        nmap - :Switch<CR>

    " }}}

    " `NrrwRgn` {{{
    " -------------

        " Don't delay `<Leader>n`
        nmap <Plug>Nope <Plug>NrrwrgnDo

    " }}}

    " `CamelCaseMotion` {{{
    " ---------------------

        call camelcasemotion#CreateMotionMappings('<leader>')

    " }}}


" }}}

" Mappings {{{
" ============

    " Logical `Y` behavior
    noremap Y y$

    map <silent> <Leader>p :set paste!<CR>

    " nmap <silent> <Left> :vertical resize -5<CR>
    " nmap <silent> <Up> :resize -5<CR>
    " nmap <silent> <Right> :vertical resize +5<CR>
    " nmap <silent> <Down> :resize +5<CR>

    " Shortcuts to browse buffers
    map <silent> <C-n> :bn<CR>
    map <silent> <C-p> :bp<CR>

" }}}

" Helpers {{{
" ===========

    " Cursor jump {{{
    " ---------------

        " Jump to last known cursor position
        autocmd BufReadPost *
            \ if line("'\"") > 1 && line("'\"") <= line('$') |
            \   exe 'normal! g`"' |
            \ endif

    " }}}

    " Toggle relative numbering {{{
    " -----------------------------

        map <silent> <Leader>r :set relativenumber!<CR>

    " }}}

    " Count words (not dumb like `wc -w`) {{{
    " ---------------------------------------

        function! WordCount()
            write !grep -Eo '\w+' | wc -l
        endfunction

        command! WordCount call WordCount()

    " }}}

" }}}
