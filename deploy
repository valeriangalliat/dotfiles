#!/usr/bin/env bash

# Backup directory
BAK=$HOME/dotfiles.bak

# Options
OPTBAK=true
OPTSUB=

while getopts "ns:" opt; do
    case $opt in
        n)
            # Do not backup
            OPTBAK=false
            ;;
        s)
            # Only one subdirectory
            OPTSUB=$OPTARG
            ;;
        \?)
            echo "Invalid option: -$OPTARG" >&2
            exit 1
            ;;
    esac
done

# Uses Python to get relative path.
#
# $1: The absolute path
# $2: The folder it is relative to (default is $PWD)
function relpath {
    python -c "import os.path; print(os.path.relpath('$1', '${2:-$PWD}'))"
}

# Creates all the subdirectories of given file in a target directory.
#
# $1: Template file
# $2: Target directory
function mksub {
    file=$1
    dest=$2
    sub=$(dirname "$file")

    # Return if no subdirectory or already exists
    if [[ "$sub" == . ]] || [[ -d "$dest/$sub" ]]; then
        return
    fi

    mkdir -p "$dest/$sub"
}

# Returns whether a file exists (including broken links).
#
# $1: File to test
function exists {
    [[ -a "$1" ]] || [[ -L "$1" ]]
    return $?
}

# Backups given file in $BAK directory keeping the directory structure.
# Example: $HOME/.i3/config will be moved into $BAK/.i3/config.
#
# $1: File to backup, relative to $HOME
function bak {
    file=$1

    # Nothing to backup
    if ! exists "$HOME/$file"; then
        echo "Unable to backup unexisting file $HOME/$file" >&2
        return 1
    fi

    # Delete instead of saving
    if ! "$OPTBAK"; then
        rm "$HOME/$file"
        return
    fi

    if ! exists "$BAK"; then
        mkdir "$BAK"
    fi

    mksub "$file" "$BAK"
    mv "$HOME/$file" "$BAK/$file"
}

# Creates a link into $HOME.
#
# If the dotfile already exists, it will be moved in $BAK directory (with its
# directory structure if not directly in $HOME).
#
# $1: Subdirectory (ignored in home)
# $2: Dotfile path, relative to $HOME
function link {
    dir=$1
    file=$2

    # Only install specified subdirectory config if specified
    if [ ! -z "$OPTSUB" ] && [ "$dir" != "$OPTSUB" ]; then
        return
    fi

    # No such file
    if ! exists "$PWD/$dir/$file"; then
        echo "Unexisting file $PWD/$dir/$file"
        return 1
    fi


    # Backup existing file if exists
    bak "$file" 2>/dev/null

    mksub "$file" "$HOME"

    # The relative path to dotfile
    target=$(relpath "$PWD/$dir/$file" "$(dirname "$HOME/$file")")

    echo "Linking $file"
    ln -s "$target" "$HOME/$file"
}

if "$OPTBAK" && exists "$BAK"; then
    echo "Please remove $BAK before deploying dotfiles." >&2
    exit 1
fi

link bash .bash_profile
link bash .bashrc
link gtk .gtkrc-2.0
link i3 .i3/config
link i3 .i3status.conf
link sublime-text ".config/sublime-text-3/Installed Packages/DocBlockr"
link sublime-text ".config/sublime-text-3/Installed Packages/Package Control"
link sublime-text ".config/sublime-text-3/Installed Packages/Theme - Soda"
link sublime-text ".config/sublime-text-3/Packages/User/Espresso Soda.tmTheme"
link sublime-text ".config/sublime-text-3/Packages/User/Monokai Soda.tmTheme"
link sublime-text ".config/sublime-text-3/Packages/User/Preferences.sublime-settings"
link vim .vim/colors/wombat256mod.vim
link vim .vimrc
link xorg .xinitrc
link xorg .Xressources
